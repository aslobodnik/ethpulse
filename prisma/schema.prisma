generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Proposal {
  id          String   @id @default(uuid())
  description String
  options     String[]
  votes       Vote[]
  endAt       DateTime @default(now()) @map("end_at")
  activated   Boolean  @default(true)
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  aggregateVote AggregateVote?

  @@map("proposals")
}

model Vote {
  id         String   @id @default(uuid())
  proposalId String   @map("proposal_id")
  wallet     String
  signature  String
  voteOption String   @map("vote_option")
  numVotes   String   @map("num_votes")
  updatedAt  DateTime @default(now()) @map("updated_at")
  createdAt  DateTime @default(now()) @map("created_at")
  proposal   Proposal @relation(fields: [proposalId], references: [id])

  @@unique([proposalId, wallet])
  @@map("votes")
}

model AggregateVote {
  id          String   @id @default(uuid())
  proposalId  String   @map("proposal_id")
  totalVotes  Json     @map("total_votes")
  totalVoters Json     @default("{}") @map("total_voters")
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  proposal Proposal @relation(fields: [proposalId], references: [id])

  @@unique([proposalId])
  @@map("aggregate_votes")
}
